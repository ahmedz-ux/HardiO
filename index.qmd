---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html: default

execute:
  echo: false
  eval: true
knitr:
  opts_chunk:
    python.reticulate: false
---

# ðŸŽ² Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

# My Analysis: Investment Game Simulation ðŸŽ¯

Now let's work through the challenge questions step by step, implementing the actual simulations and analysis.

## Question 1: Expected Value After 1 Coin Flip

**Answer:** The expected value is **$1,050**, which is **greater than the starting $1,000**

**Calculation:**
- Heads (50% chance): $1,000 Ã— 1.5 = $1,500
- Tails (50% chance): $1,000 Ã— 0.6 = $600
- Expected Value = 0.5 Ã— $1,500 + 0.5 Ã— $600 = **$1,050**

## Question 2: Expectation vs. Reality

**Answer:** The expected value is **positive** ($1,050 vs. $1,000), so we expect the account to be worth **more** than $1,000.

**However:** This is just math! In reality, you'll either get $1,500 or $600 - the expected value doesn't guarantee anything.

## Question 3: Single Simulation Over Time

```{r}
#| label: single-simulation
#| fig-cap: One simulation showing account balance from age 25 to 55
#| echo: false

set.seed(42)
initial_balance <- 1000
n_years <- 30

# Simulate 30 years
balance <- initial_balance
age <- 25
results <- data.frame(age = age, balance = balance)

for (i in 1:n_years) {
  coin_flip <- rbinom(1, 1, 0.5)  # 1 = heads, 0 = tails
  
  if (coin_flip == 1) {
    balance <- balance * 1.5  # +50%
  } else {
    balance <- balance * 0.6  # -40%
  }
  
  age <- age + 1
  results <- rbind(results, data.frame(age = age, balance = balance))
}

# Create ggplot2 plot
library(ggplot2)
ggplot(results, aes(x = age, y = balance)) +
  geom_line(color = "darkblue", linewidth = 1.2) +
  geom_point(color = "red", size = 2) +
  geom_hline(yintercept = initial_balance, color = "green", linetype = "dashed", linewidth = 1) +
  labs(
    title = "Single Simulation: Account Balance Over Time",
    subtitle = "Account Balance Evolution from Age 25 to 55",
    x = "Age",
    y = "Account Balance ($)",
    caption = "Green line shows initial balance ($1,000)\nHeads: +50%, Tails: -40%"
  ) +
  scale_y_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10)
  )

# Show final result
final_balance <- results$balance[nrow(results)]
total_return <- round((final_balance / initial_balance - 1) * 100, 1)

cat("Final Balance at Age 55: $", round(final_balance, 2), "\n")
cat("Total Return: ", total_return, "%\n")
cat("Am I happy? Based on this result, I am **Happy** because the simulation shows **a significant gain** over 30 years.\n")
```



**Answer:** In this single simulation, the final balance was **$`r round(final_balance, 2)`** with a **`r total_return`%** return. 

**Am I happy?** Based on this result, I am **Happy** because the simulation shows **a significant gain** over 30 years.

## Question 4: 100 Simulations - Distribution of Results

```{r}
#| label: multiple-simulations
#| fig-cap: Distribution of final balances from 100 simulations
#| echo: false

set.seed(123)
initial_balance <- 1000
n_years <- 30
n_sims <- 100

# Function to run one complete simulation
simulate_final_balance <- function(initial, years) {
  balance <- initial
  
  for (i in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)  # 1 = heads, 0 = tails
    
    if (coin_flip == 1) {
      balance <- balance * 1.5  # +50%
    } else {
      balance <- balance * 0.6  # -40%
    }
  }
  
  return(balance)
}

# Run 100 simulations
final_balances <- replicate(n_sims, simulate_final_balance(initial_balance, n_years))

# Create histogram using ggplot2
library(ggplot2)
sim_results <- data.frame(final_balance = final_balances)
ggplot(sim_results, aes(x = final_balance)) +
  geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7, color = "black") +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1.5) +
  labs(
    title = "Distribution of Final Balances (100 Simulations)",
    subtitle = "100 Simulations of Original Investment Game (Age 25 to 55)",
    x = "Final Balance at Age 55 ($)",
    y = "Frequency",
    caption = "Red line: Initial balance ($1,000)"
  ) +
  scale_x_continuous(
    labels = scales::dollar_format(),
    trans = "log10",
    breaks = c(1, 10, 100, 1000, 10000, 100000)
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10)
  )

# Summary statistics
prob_above_1000 <- mean(final_balances > 1000)
mean_balance <- mean(final_balances)
median_balance <- median(final_balances)

cat("Results from 100 simulations:\n")
cat("Mean final balance: $", round(mean_balance, 2), "\n")
cat("Median final balance: $", round(median_balance, 2), "\n")
cat("Probability above $1,000: ", round(prob_above_1000 * 100, 1), "%\n")
```

**Answer:** From 100 simulations:
- **Mean final balance:** $`r round(mean_balance, 2)`
- **Median final balance:** $`r round(median_balance, 2)`  
- **Probability above $1,000:** `r round(prob_above_1000 * 100, 1)`%

**Am I happy?** Based on these results, I am **surprised** because most simulations show **losses** despite the positive expected value per flip.

## Question 5: Probability of Ending Up Above $1,000

**Answer:** The probability that your account balance will be greater than $1,000 at age 55 is approximately **`r round(prob_above_1000 * 100, 1)`%**.

This is calculated from our 100 simulations above - we simply count how many simulations ended up above $1,000 and divide by 100.

**Key Insight:** Even though each coin flip has a positive expected value, most people actually lose money over 30 years! This is the counterintuitive result of the investment game.

## Question 6: Modified Game Strategy Comparison

**Modified Game Rules:**
- You bet exactly 50% of your current balance on each flip
- Heads: You gain 25% of your current balance (1.25x multiplier)
- Tails: You lose 20% of your current balance (0.80x multiplier)

```{r}
#| label: modified-game-comparison
#| fig-cap: Comparison of original vs modified game strategies
#| echo: false

set.seed(456)
initial_balance <- 1000
n_years <- 30
n_sims <- 100

# Function for modified game
simulate_modified_game <- function(initial, years) {
  balance <- initial
  
  for (i in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)  # 1 = heads, 0 = tails
    
    if (coin_flip == 1) {
      balance <- balance * 1.25  # +25%
    } else {
      balance <- balance * 0.80  # -20%
    }
  }
  
  return(balance)
}

# Run 100 simulations for modified game
modified_final_balances <- replicate(n_sims, simulate_modified_game(initial_balance, n_years))

# Create comparison data frame
comparison_data <- data.frame(
  Game_Type = c(rep("Original Game", n_sims), rep("Modified Game", n_sims)),
  Final_Balance = c(final_balances, modified_final_balances)
)

# Create comparison histogram using ggplot2
library(ggplot2)
ggplot(comparison_data, aes(x = Final_Balance, fill = Game_Type)) +
  geom_histogram(alpha = 0.7, bins = 30, position = "identity") +
  geom_vline(xintercept = 10000, color = "red", linetype = "dashed", linewidth = 1.5) +
  scale_x_continuous(
    labels = scales::dollar_format(),
    trans = "log10",
    breaks = c(1, 10, 100, 1000, 10000, 100000)
  ) +
  labs(
    title = "Comparison of Final Balances: Original vs Modified Game",
    subtitle = "100 Simulations Each (Age 25 to 55)",
    x = "Final Balance at Age 55 ($)",
    y = "Frequency",
    caption = "Red line: $10,000 threshold"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    legend.position = "bottom"
  ) +
  guides(fill = guide_legend(title = "Game Strategy"))

# Calculate probabilities
prob_original_above_10000 <- mean(final_balances > 10000)
prob_modified_above_10000 <- mean(modified_final_balances > 10000)

# Show comparison
cat("Strategy Comparison Results:\n")
cat("Original Game - Probability above $10,000: ", round(prob_original_above_10000 * 100, 1), "%\n")
cat("Modified Game - Probability above $10,000: ", round(prob_modified_above_10000 * 100, 1), "%\n")
cat("Original Game - Mean final balance: $", round(mean(final_balances), 2), "\n")
cat("Modified Game - Mean final balance: $", round(mean(modified_final_balances), 2), "\n")
```

**Answer:** 
- **Original Game:** Probability above $10,000 = **`r round(prob_original_above_10000 * 100, 1)`%**
- **Modified Game:** Probability above $10,000 = **`r round(prob_modified_above_10000 * 100, 1)`%**

**Comparison:** The probability in the modified game is **`r ifelse(prob_modified_above_10000 > prob_original_above_10000, "HIGHER", "LOWER")`** than the original game.

**Why?** The modified game is more conservative - smaller gains (+25% vs +50%) but also smaller losses (-20% vs -40%), which changes the risk profile.

# Conclusion: Key Insights ðŸŽ¯

## What We Learned

**The Counterintuitive Truth:** Even though each coin flip has a positive expected value, most people actually lose money over 30 years!

### Key Insights:

1. **Expected Value â‰  Reality**: Just because the math says you should make money doesn't mean you will
2. **Volatility Kills Returns**: High volatility (big swings) reduces your chances of success over time
3. **Simulation Reveals Truth**: Running 100 simulations showed us what intuition couldn't predict

### Why This Happens:
- **Multiplicative Process**: Each loss compounds, making it harder to recover
- **Asymmetric Risk**: A 40% loss requires a 67% gain just to break even
- **Time Amplifies Problems**: Over 30 years, bad luck compounds dramatically

## The Big Picture

This challenge demonstrates why **simulation is so powerful** - it reveals insights that pure mathematics and intuition miss. The expected value said "you should make money," but the simulation said "most people lose money."

**Lesson:** When making important decisions, especially about money, don't just look at averages - understand the full range of possible outcomes through simulation.

---

*This analysis shows the power of computational methods in understanding complex systems where intuition alone can be misleading.*
