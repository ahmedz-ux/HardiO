---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html: default

execute:
  echo: false
  eval: false
knitr:
  opts_chunk:
    python.reticulate: false
---

# üé≤ Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

::: {.callout-warning}
## ‚ö†Ô∏è AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance ‚Üí Awareness ‚Üí Learning ‚Üí Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## The Investment Game üéØ

### Original Game Strategy

::: {#exm-ErgodicityEconomicsExample}
Imagine you are offered the following game and given a $1,000 budget in a special account to play the game: I will flip a coin, and if it comes up heads, we increase your account's balance by 50%; if it comes up tails, we reduce your account's balance by 40%. We are not only doing this once, but we will do it once per year until you turn 55. When you turn 55, you will receive the balance in your account.
:::



## Challenge Requirements üìã

### Minimum Requirements for Any Points on Challenge

1. **Create a Quarto Document:** Write a concise quarto markdown file that includes a narrative of what you are doing along with the requested code, results, and visualizations of your simulations.

   ::: {.callout-tip}
   ## üí° Pro Tip: Source File Reference
   
   **Need help with Quarto syntax or DAFT diagrams?** You can find the complete source `.qmd` file for this challenge at:
   
   **GitHub Repository:** [flyaflya/buad442Fall2025/challenges/03-Simulation-Challenge/simulationChallenge.qmd](https://github.com/flyaflya/buad442Fall2025/blob/main/challenges/03-Simulation-Challenge/simulationChallenge.qmd)
   
   This is a great resource for understanding Quarto syntax, seeing how DAFT diagrams are implemented, and learning from the complete working example!
   :::

2. **Render to HTML:** You must render the quarto markdown file to HTML.

3. **GitHub Repository:** The rendered HTML must be uploaded to a new GitHub repository called "simulationChallenge" in your Github account.

4. **GitHub Pages Setup:** The repository should be made the source of your github pages:

   - Go to your repository settings (click the "Settings" tab in your GitHub repository)
   - Scroll down to the "Pages" section in the left sidebar
   - Under "Source", select "Deploy from a branch"
   - Choose "main" branch and "/ (root)" folder
   - Click "Save"
   - Your site will be available at: `https://[your-username].github.io/simulationChallenge/`
   - **Note:** It may take a few minutes for the site to become available after enabling Pages

## Grading Rubric üéì

### Questions to Answer for 75% Grade on Challenge

1. **Expected Value Analysis:** What is the "expected value" of your account balance after 1 coin flip for the original game?

2. **Expectation vs. Reality:** Is the expected value positive or negative? Do you expect your account to be worth more or less than $1,000 based on this result?

3. **Single Simulation:** Run one simulation showing the dynamics of your account balance over time. Make an object-oriented matplotlib OR ggplot2 plot showing your simulated account balance over time (i.e. as you age). Comment on the results, are you happy?

### Questions to Answer for 85% Grade on Challenge

4. **Multiple Simulations:** Run 100 simulations modelling the dynamics of your account balance over time. Make an object-oriented matplotlib OR ggplot2 plot showing a probability distribution of the 100 simulatedaccount balance at age 55. Comment on the results, are you happy? Why or why not?

### Questions to Answer for 95% Grade on Challenge

5. **Probability Analysis:** Based on the 100 simulations above, what is the probability that your account balance will be greater than $1,000 at age 55?

### Questions to Answer for 100% Grade on Challenge

6. **Strategy Comparison:** Run 100 simulations for the modified game strategy shown below in @exm-ErgodicityEconomicsExampleModified. What is the probability that your account balance will be greater than $10,000 at age 55? Is this probability higher or lower than the probability in the original game?

### Modified Game Strategy

::: {#exm-ErgodicityEconomicsExampleModified}
Imagine you are offered the following game and given a $1,000 budget in a special account to play the game: I will flip a coin, and if it comes up heads, we increase your bet by 50%; if it comes up tails, we reduce your bet by 40%. You must bet exactly 50% of your current account balance on each flip, and this 50% is locked in for each round. We are not only doing this once, but we will do it once per year until you turn 55. When you turn 55, you will receive the balance in your account.
:::

## Technical Implementation Preferences üí°

### Setting Up Your Analysis

**For R Users:**

- Use `tidyverse` for data manipulation
- Use `ggplot2` for visualizations
- Use `set.seed()` for reproducible results

**For Python Users:**

- Use `numpy` for numerical operations
- Use `pandas` for data manipulation
- Use `matplotlib` (object-oriented)
- Use `np.random.seed()` for reproducible results

### Visualization Preferences

- **Professional Styling:** Use consistent colors, clear labels, readable fonts, and informative titles

## Submission Checklist ‚úÖ

**Minimum Requirements (Required for Any Points):**

- [ ] Quarto document created with clear narrative
- [ ] Document rendered to HTML successfully
- [ ] Repository "simulationChallenge" created
- [ ] HTML files uploaded to repository
- [ ] GitHub Pages enabled and working
- [ ] Site accessible at `https://[your-username].github.io/simulationChallenge/`

**75% Grade Requirements:**

- [ ] Expected value calculations shown (Question 1)
- [ ] Expectation vs. reality analysis (Question 2)
- [ ] Single simulation with time series plot (Question 3)
- [ ] Clear interpretation of single simulation results

**85% Grade Requirements:**

- [ ] 100 simulations with distribution analysis (Question 4)
- [ ] Probability distribution plot of final account balances
- [ ] Clear interpretation of multiple simulation results

**95% Grade Requirements:**

- [ ] Probability calculations for original strategy (Question 5)
- [ ] Analysis of probability that balance > $1,000 at age 55

**100% Grade Requirements:**

- [ ] 100 simulations for modified strategy (Question 6)
- [ ] Probability calculations for modified strategy
- [ ] Comparative analysis between both strategies
- [ ] Analysis of probability that balance > $10,000 at age 55

**Code Quality (All Grades):**

- [ ] Reproducible results (seeds set)
- [ ] Clean, well-commented code
- [ ] Appropriate use of functions and loops
- [ ] Professional visualization styling

### Resources

- **Quarto Markdown:** [quarto.org/docs/authoring/markdown-basics.html](https://quarto.org/docs/authoring/markdown-basics.html)
- **Quarto Documentation:** [quarto.org/docs](https://quarto.org/docs)
- **R for Data Science:** [r4ds.had.co.nz](https://r4ds.had.co.nz)
- **Python Data Science Handbook:** [jakevdp.github.io/PythonDataScienceHandbook](https://jakevdp.github.io/PythonDataScienceHandbook)

### Getting Started Tips

::: {.callout-note}
## üéØ Navy SEALs Motto

> "Slow is Smooth and Smooth is Fast"

*Take your time to understand the simulation mechanics, plan your approach carefully, and execute with precision. Rushing through this challenge will only lead to errors and confusion.*
:::

- **Browse [Essential Simulation Concepts](@sec-simulation-concepts):** This section will give you a good understanding of the concepts you need to know to complete the challenge.
- **Start Simple:** Begin with a single simulation to understand the mechanics
- **Document Everything:** Explain your reasoning and interpret your results
- **Forgetting to Set Seeds:** Always set random seeds for reproducible results
- **Total time to complete:** ~3-4 hours for the 100% grade ‚è±Ô∏è
- **Good luck, and remember simulation will steer you right even when intuition will steer you wrong!** üé≤

::: {.callout-warning}
## üíæ Important: Save Your Work Frequently!

**Before you start coding:** Make sure to commit your work often using the Source Control panel in Cursor (Ctrl+Shift+G or Cmd+Shift+G). This prevents the AI from overwriting your progress and ensures you don't lose your work.

**Commit after each major step:**

- After completing each simulation example
- After finishing each challenge question
- Before asking the AI for help with new code

**How to commit:**

1. Open Source Control panel (Ctrl+Shift+G)
2. Stage your changes (+ button)
3. Write a descriptive commit message
4. Click the checkmark to commit

*Remember: Frequent commits are your safety net!*
:::

## Essential Simulation Concepts üéØ {#sec-simulation-concepts}

Before diving into the challenge, let's review the key simulation concepts you'll need. These examples will prepare you for the investment game analysis.

### 1. Simple Simulation: Coin Flip Game

Let's start with a basic coin flip simulation to understand the mechanics:


::: {.panel-tabset}

### R

```{r}
#| label: simple-sim-r
#| fig-cap: R simulation of coin flip game
#| echo: true

suppressPackageStartupMessages(library(tidyverse))

# Set seed for reproducibility
set.seed(123)

# Number of simulations
n_sims <- 10

# Create simulation data
sim_data <- tibble(
  sim_num = 1:n_sims,
  coin_flip = rbinom(n = n_sims, size = 1, prob = 0.5)
) %>%
  mutate(
    winnings = if_else(coin_flip == 1, 100, -100)
  )

# Display results
sim_data
```

### Python

```{python}
#| eval: false
#| label: simple-sim-python
#| fig-cap: Python simulation of coin flip game
#| echo: true

import numpy as np
import pandas as pd

# Set seed for reproducibility
np.random.seed(123)

# Number of simulations
n_sims = 10

# Step 1: Draw coin flips (stochastic node)
X = np.random.binomial(n=1, p=0.5, size=n_sims)

# Step 2: Compute winnings (deterministic node)
W = np.where(X == 1, 100, -100)

# Combine into data frame
sim_data = pd.DataFrame({
    'sim_num': range(1, n_sims + 1),
    'coin_flip': X,
    'winnings': W
})

# Display results
sim_data
```

:::

### 2. Time-Series Simulation: Account Balance Over Time

Now let's simulate how an account balance changes over multiple periods:


::: {.panel-tabset}

### R

```{r}
#| label: timeseries-sim-r
#| fig-cap: R time-series simulation of account balance
#| echo: true

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))

# Set seed for reproducibility
set.seed(456)

# Parameters
initial_balance <- 1000
n_periods <- 10
n_sims <- 1  # Start with one simulation

# Simulate one path
simulate_path <- function(initial, periods) {
  balance <- initial
  path <- numeric(periods + 1)
  path[1] <- initial
  
  for (i in 1:periods) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance + 100
    } else {
      balance <- balance - 100
    }
    path[i + 1] <- balance
  }
  
  return(path)
}

# Run simulation
time_series_data <- tibble(
  period = 0:n_periods,
  balance = simulate_path(initial_balance, n_periods)
)

# Create time series plot
ggplot(time_series_data, aes(x = period, y = balance)) +
  geom_line(color = "cadetblue", linewidth = 1.2) +
  geom_point(color = "darkblue", size = 2) +
  labs(
    title = "Account Balance Over Time",
    subtitle = "Single Simulation Path",
    x = "Period",
    y = "Account Balance ($)",
    caption = "Heads: +$100$, Tails: -$100$"
  ) +
  scale_y_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50")
  )

# Show the data
time_series_data
```

### Python

```{python}
#| eval: false
#| label: timeseries-sim-python
#| fig-cap: Python time-series simulation of account balance
#| echo: true

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Set seed for reproducibility
np.random.seed(456)

# Parameters
initial_balance = 1000
n_periods = 10
n_sims = 1  # Start with one simulation

# Simulate one path
def simulate_path(initial, periods):
    balance = initial
    path = [initial]
    
    for i in range(periods):
        coin_flip = np.random.binomial(1, 0.5)
        if coin_flip == 1:
            balance = balance + 100  # $100 gain
        else:
            balance = balance - 100  # $100 loss
        path.append(balance)
    
    return path

# Run simulation
time_series_data = pd.DataFrame({
    'period': range(n_periods + 1),
    'balance': simulate_path(initial_balance, n_periods)
})

# Create time series plot
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(time_series_data['period'], time_series_data['balance'], 
        color='cadetblue', linewidth=2, marker='o', markersize=6)
ax.set_title('Account Balance Over Time\nSingle Simulation Path', 
             fontsize=14, fontweight='bold')
ax.set_xlabel('Period', fontsize=12)
ax.set_ylabel('Account Balance ($)', fontsize=12)
ax.grid(True, alpha=0.3)
ax.set_ylim(0, max(time_series_data['balance']) * 1.1)

# Format y-axis as currency
ax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))

plt.tight_layout()
plt.show()

# Show the data
print("Time Series Data:")
print(time_series_data)
```

:::

### 3. Probability Distribution: Final Balance Distribution

Let's see what the distribution of final balances looks like across many simulations:

::: {.panel-tabset}

### R

```{r}
#| label: distribution-sim-r
#| fig-cap: R probability distribution of final balances
#| echo: true

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))

# Set seed for reproducibility
set.seed(789)

# Parameters
initial_balance <- 1000
n_periods <- 10
n_sims <- 100  # Multiple simulations

# Simulate multiple paths
simulate_final_balance <- function(initial, periods) {
  balance <- initial
  for (i in 1:periods) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance + 100  # $100 gain
    } else {
      balance <- balance - 100  # $100 loss
    }
  }
  return(balance)
}

# Run multiple simulations
final_balances <- replicate(n_sims, simulate_final_balance(initial_balance, n_periods))

# Create data frame
distribution_data <- tibble(
  sim_num = 1:n_sims,
  final_balance = final_balances
)

# Create histogram
ggplot(distribution_data, aes(x = final_balance)) +
  geom_histogram(bins = 20, fill = "plum", alpha = 0.8, color = "black") +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1) +
  labs(
    title = "Distribution of Final Account Balances",
    subtitle = paste("100 Simulations,", n_periods, "Periods Each"),
    x = "Final Balance ($)",
    y = "Frequency",
    caption = "Red line shows initial balance ($1,000)"
  ) +
  scale_x_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50")
  )

# Summary statistics
summary_stats <- distribution_data %>%
  summarise(
    mean_balance = mean(final_balance),
    median_balance = median(final_balance),
    prob_above_initial = mean(final_balance > initial_balance)
  )

print("Summary Statistics:")
summary_stats
```

### Python

```{python}
#| eval: false
#| label: distribution-sim-python
#| fig-cap: Python probability distribution of final balances
#| echo: true

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Set seed for reproducibility
np.random.seed(789)

# Parameters
initial_balance = 1000
n_periods = 10
n_sims = 100  # Multiple simulations

# Simulate multiple paths
def simulate_final_balance(initial, periods):
    balance = initial
    for i in range(periods):
        coin_flip = np.random.binomial(1, 0.5)
        if coin_flip == 1:
            balance = balance + 100  # $100 gain
        else:
            balance = balance - 100  # $100 loss
    return balance

# Run multiple simulations
final_balances = [simulate_final_balance(initial_balance, n_periods) for _ in range(n_sims)]

# Create data frame
distribution_data = pd.DataFrame({
    'sim_num': range(1, n_sims + 1),
    'final_balance': final_balances
})

# Create histogram
fig, ax = plt.subplots(figsize=(10, 6))
ax.hist(distribution_data['final_balance'], bins=20, color='plum', alpha=0.8, edgecolor='black')
ax.axvline(initial_balance, color='red', linestyle='--', linewidth=2, label='Initial Balance')
ax.set_title(f'Distribution of Final Account Balances\n100 Simulations, {n_periods} Periods Each', 
             fontsize=14, fontweight='bold')
ax.set_xlabel('Final Balance ($)', fontsize=12)
ax.set_ylabel('Frequency', fontsize=12)
ax.legend()
ax.grid(True, alpha=0.3)

# Format x-axis as currency
ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))

plt.tight_layout()
plt.show()

# Summary statistics
mean_balance = distribution_data['final_balance'].mean()
median_balance = distribution_data['final_balance'].median()
prob_above_initial = (distribution_data['final_balance'] > initial_balance).mean()

print("Summary Statistics:")
print(f"Mean balance: ${mean_balance:,.2f}")
print(f"Median balance: ${median_balance:,.2f}")
print(f"Probability above initial: {prob_above_initial:.3f}")
```

:::

# My Analysis: Investment Game Simulation üéØ

## Question 1: Expected Value After 1 Coin Flip

**Answer:** The expected value is **$1,050**

**Calculation:**
- Heads (50% chance): $1,000 √ó 1.5 = $1,500
- Tails (50% chance): $1,000 √ó 0.6 = $600
- Expected Value = 0.5 √ó $1,500 + 0.5 √ó $600 = **$1,050**

## Question 2: Expectation vs. Reality

**Answer:** The expected value is **positive** ($1,050 vs. $1,000), so we expect the account to be worth **more** than $1,000.

**However:** This is just math! In reality, you'll either get $1,500 or $600 - the expected value doesn't guarantee anything.

## Question 3: Single Simulation Over Time

```{r}
#| label: single-simulation
#| fig-cap: One simulation showing account balance from age 25 to 55
#| echo: false

set.seed(42)
initial_balance <- 1000
n_years <- 30

# Simulate 30 years
balance <- initial_balance
age <- 25
results <- data.frame(age = age, balance = balance)

for (i in 1:n_years) {
  coin_flip <- rbinom(1, 1, 0.5)  # 1 = heads, 0 = tails
  
  if (coin_flip == 1) {
    balance <- balance * 1.5  # +50%
  } else {
    balance <- balance * 0.6  # -40%
  }
  
  age <- age + 1
  results <- rbind(results, data.frame(age = age, balance = balance))
}

# Plot the results
library(ggplot2)
ggplot(results, aes(x = age, y = balance)) +
  geom_line(color = "darkblue", linewidth = 1.2) +
  geom_point(color = "red", size = 2) +
  geom_hline(yintercept = initial_balance, color = "green", linetype = "dashed") +
  labs(
    title = "Single Simulation: Account Balance Over Time",
    x = "Age", y = "Account Balance ($)",
    caption = "Green line = Initial $1,000"
  ) +
  scale_y_continuous(labels = scales::dollar_format()) +
  theme_minimal()

# Show final result
final_balance <- results$balance[nrow(results)]
cat("Final Balance at Age 55: $", round(final_balance, 2), "\n")
cat("Total Return: ", round((final_balance / initial_balance - 1) * 100, 1), "%\n")
```

**Answer:** In this single simulation, the final balance was **[WILL SHOW IN OUTPUT]** with a **[WILL SHOW IN OUTPUT]**% return. 

**Am I happy?** [Your interpretation based on the actual result]

## Question 4: 100 Simulations - Distribution of Results

```{r}
#| label: multiple-simulations
#| fig-cap: Distribution of final balances from 100 simulations
#| echo: false

set.seed(123)
initial_balance <- 1000
n_years <- 30
n_sims <- 100

# Function to run one complete simulation
simulate_final_balance <- function(initial, years) {
  balance <- initial
  
  for (i in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)  # 1 = heads, 0 = tails
    
    if (coin_flip == 1) {
      balance <- balance * 1.5  # +50%
    } else {
      balance <- balance * 0.6  # -40%
    }
  }
  
  return(balance)
}

# Run 100 simulations
final_balances <- replicate(n_sims, simulate_final_balance(initial_balance, n_years))

# Create histogram
sim_results <- data.frame(final_balance = final_balances)
ggplot(sim_results, aes(x = final_balance)) +
  geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7, color = "black") +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1.5) +
  labs(
    title = "Distribution of Final Balances (100 Simulations)",
    x = "Final Balance at Age 55 ($)", y = "Frequency",
    caption = "Red line = Initial $1,000"
  ) +
  scale_x_continuous(labels = scales::dollar_format(), trans = "log10") +
  theme_minimal()

# Summary statistics
prob_above_1000 <- mean(final_balances > 1000)
mean_balance <- mean(final_balances)
median_balance <- median(final_balances)

cat("Results from 100 simulations:\n")
cat("Mean final balance: $", round(mean_balance, 2), "\n")
cat("Median final balance: $", round(median_balance, 2), "\n")
cat("Probability above $1,000: ", round(prob_above_1000 * 100, 1), "%\n")
```

**Answer:** From 100 simulations:
- **Mean final balance:** $**[WILL SHOW IN OUTPUT]**
- **Median final balance:** $**[WILL SHOW IN OUTPUT]**  
- **Probability above $1,000:** **[WILL SHOW IN OUTPUT]**%

**Am I happy?** [Your interpretation - most people lose money despite positive expected value!]

## Question 5: Probability of Ending Up Above $1,000

**Answer:** The probability that your account balance will be greater than $1,000 at age 55 is approximately **[WILL SHOW IN OUTPUT]**%.

This is calculated from our 100 simulations above - we simply count how many simulations ended up above $1,000 and divide by 100.

**Key Insight:** Even though each coin flip has a positive expected value, most people actually lose money over 30 years! This is the counterintuitive result of the investment game.

## Question 6: Modified Game Strategy Comparison

**Modified Game Rules:**
- You bet exactly 50% of your current balance on each flip
- Heads: You gain 25% of your current balance (1.25x multiplier)
- Tails: You lose 20% of your current balance (0.80x multiplier)

```{r}
#| label: modified-game-comparison
#| fig-cap: Comparison of original vs modified game strategies
#| echo: false

set.seed(456)
initial_balance <- 1000
n_years <- 30
n_sims <- 100

# Function for modified game
simulate_modified_game <- function(initial, years) {
  balance <- initial
  
  for (i in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)  # 1 = heads, 0 = tails
    
    if (coin_flip == 1) {
      balance <- balance * 1.25  # +25%
    } else {
      balance <- balance * 0.80  # -20%
    }
  }
  
  return(balance)
}

# Run 100 simulations for modified game
modified_final_balances <- replicate(n_sims, simulate_modified_game(initial_balance, n_years))

# Calculate probabilities
prob_original_above_10000 <- mean(final_balances > 10000)
prob_modified_above_10000 <- mean(modified_final_balances > 10000)

# Show comparison
cat("Strategy Comparison Results:\n")
cat("Original Game - Probability above $10,000: ", round(prob_original_above_10000 * 100, 1), "%\n")
cat("Modified Game - Probability above $10,000: ", round(prob_modified_above_10000 * 100, 1), "%\n")
cat("Original Game - Mean final balance: $", round(mean(final_balances), 2), "\n")
cat("Modified Game - Mean final balance: $", round(mean(modified_final_balances), 2), "\n")
```

**Answer:** 
- **Original Game:** Probability above $10,000 = **[WILL SHOW IN OUTPUT]**%
- **Modified Game:** Probability above $10,000 = **[WILL SHOW IN OUTPUT]**%

**Comparison:** The probability in the modified game is **[HIGHER/LOWER]** than the original game.

**Why?** The modified game is more conservative - smaller gains (+25% vs +50%) but also smaller losses (-20% vs -40%), which changes the risk profile.

# Conclusion: Key Insights üéØ

## What We Learned

**The Counterintuitive Truth:** Even though each coin flip has a positive expected value, most people actually lose money over 30 years!

### Key Insights:

1. **Expected Value ‚â† Reality**: Just because the math says you should make money doesn't mean you will
2. **Volatility Kills Returns**: High volatility (big swings) reduces your chances of success over time
3. **Simulation Reveals Truth**: Running 100 simulations showed us what intuition couldn't predict

### Why This Happens:
- **Multiplicative Process**: Each loss compounds, making it harder to recover
- **Asymmetric Risk**: A 40% loss requires a 67% gain just to break even
- **Time Amplifies Problems**: Over 30 years, bad luck compounds dramatically

## The Big Picture

This challenge demonstrates why **simulation is so powerful** - it reveals insights that pure mathematics and intuition miss. The expected value said "you should make money," but the simulation said "most people lose money."

**Lesson:** When making important decisions, especially about money, don't just look at averages - understand the full range of possible outcomes through simulation.

---

*This analysis shows the power of computational methods in understanding complex systems where intuition alone can be misleading.*
